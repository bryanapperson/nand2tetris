// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[0..2],  a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
    RAM8(in=in, out=aout, load=loada, address=address[3..5]);
    RAM8(in=in, out=bout, load=loadb, address=address[3..5]);
    RAM8(in=in, out=cout, load=loadc, address=address[3..5]);
    RAM8(in=in, out=dout, load=loadd, address=address[3..5]);
    RAM8(in=in, out=eout, load=loade, address=address[3..5]);
    RAM8(in=in, out=fout, load=loadf, address=address[3..5]);
    RAM8(in=in, out=gout, load=loadg, address=address[3..5]);
    RAM8(in=in, out=hout, load=loadh, address=address[3..5]);
    Mux8Way16(sel=address[0..2], out=out, a=aout, b=bout, c=cout, d=dout, e=eout, f=fout, g=gout, h=hout);
}
